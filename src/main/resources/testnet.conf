
# A config for the Test Network which is supposed to serve needs of non-breaking changes testing.

ergo {
  networkType = "testnet"
  node {
    # A node is considering that the chain is synced if sees a block header with timestamp no more
    # than headerChainDiff blocks on average from future
    # testnet value is 800 blocks ~= 1600 minutes (~1.1 days)
    headerChainDiff = 800

    # having more internal miner threads helps to reproduce real use cases, like 100 GPU miners
    internalMinersCount = 1

    # GPU miners are currently polling at 100ms interval
    internalMinerPollingInterval = 200ms

    # maximum cost of transaction for it to be propagated
    maxTransactionCost = 800000

    # Dump ADProofs only for the suffix given during bootstrapping
    adProofsSuffixLength = 114688 // 112k

    # As some v.3 blocks in the PaiNet are violating monotonic creation height rule (due to 5.0 being activated before
    #  the monotonic introduced), this checkpoint is mandatory
    checkpoint = {
      height = 91320
      blockId = "fd06abdf0e6558ebaaf524b654c922a1cb42e542ae49d1c4a79397a077209278"
    }
   }

  chain {
    protocolVersion = 3  # 5.0 soft-fork

    # Network address prefix, currently reserved values are 0 (money chain mainnet) and 16 (money chain testnet)
    addressPrefix = 16
    # Difficulty network start with
    initialDifficultyHex = "01"

    # Length of an epoch in difficulty recalculation. 1 means difficulty recalculation every block
    epochLength = 128

    blockInterval = 45s

    # Monetary config for chain
    monetary {
      # delay between the block mined and time when the reward can be spend
      minerRewardDelay = 720
    }

    voting {
      # Length of a voting epoch.
      votingLength = 128

      # Voting epochs to vote for soft-fork
      softForkEpochs = 32

      # Voting epochs to activate a soft-fork after acceptance
      activationEpochs = 32

      # Activation height for testnet protocol version 2 (client version 4.0.0 hard-fork)
      version2ActivationHeight = 128

      version2ActivationDifficultyHex = "20"
    }

    reemission {
      checkReemissionRules = false

      emissionNftId = "06f29034fb69b23d519f84c4811a19694b8cdc2ce076147aaa050276f0b840f4"

      reemissionTokenId = "01345f0ed87b74008d1c46aefd3e7ad6ee5909a2324f2899031cdfee3cc1e022"

      reemissionNftId = "06f2c3adfe52304543f7b623cc3fccddc0174a7db52452fef8e589adacdfdfee"

      activationHeight = 1880001

      reemissionStartHeight = 1860400

      injectionBoxBytesEncoded = "a0f9e1b5fb011003040005808098f4e9b5ca6a0402d1ed91c1b2a4730000730193c5a7c5b2a4730200f6ac0b0201345f0ed87b74008d1c46aefd3e7ad6ee5909a2324f2899031cdfee3cc1e02280808cfaf49aa53506f29034fb69b23d519f84c4811a19694b8cdc2ce076147aaa050276f0b840f40100325c3679e7e0e2f683e4a382aa74c2c1cb989bb6ad6a1d4b1c5a021d7b410d0f00"
    }

    # Base16 representation of genesis state roothash
    genesisStateDigestHex = "cb63aa99a3060f341781d8662b58bf18b9ad258db4fe88d09f8f71cb668cad4502"
  }

  voting {
    120 = 1 // vote for 5.0 soft-fork, the vote will not be given before block 4,096
  }

  wallet.secretStorage.secretDir = ${ergo.directory}"/wallet/keystore"
}

scorex {
  network {
    magicBytes = [2, 0, 2, 3]
    bindAddress = "0.0.0.0:9022"
    nodeName = "ergo-testnet-"${scorex.network.appVersion}
    nodeName = ${?NODENAME}
    knownPeers = [
      "213.239.193.208:9022",
      "168.138.185.215:9022",
      "192.234.196.165:9022"
    ]
  }
  restApi {
    # Hex-encoded Blake2b256 hash of an API key. Should be 64-chars long Base16 string.
    # Below is the hash of "hello" string.
    # Change it!
    apiKeyHash = "324dcf027dd4a30a932c441f365a25e86b173defa4b8e58948253471b81b72cf"
  }
}