ergo {
  # Directory to keep data
  directory = ${user.dir}"/ergo/data"

  # Settings for node view holder regime. See papers.yellow.ModifiersProcessing.md
  node {
    # State type.  Possible options are:
    # "utxo" - keep full utxo set, that allows to validate arbitrary block and generate ADProofs
    # "digest" - keep state root hash only and validate transactions via ADProofs
    stateType = "utxo"

    # Download block transactions and verify them (requires BlocksToKeep == 0 if disabled)
    verifyTransactions = true

    # Number of last blocks to keep with transactions and ADproofs, for all other blocks only header will be stored.
    # Keep all blocks from genesis if negative
    blocksToKeep = -1

    # Download PoPoW proof on node bootstrap
    PoPoWBootstrap = false

    # Minimal suffix size for PoPoW proof (may be pre-defined constant or settings parameter)
    minimalSuffix = 10

    # Is the node is doing mining
    mining = false

    # If true, a node generates blocks being offline. The only really useful case for it probably is to start a new
    # blockchain
    offlineGeneration = false

    # Delay for miner after succesful block creation
    miningDelay = 5s

    # Number of state snapshot diffs to keep. Defines maximum rollback depth
    keepVersions = 200
  }

  testing {
    # Whether to turn on transaction generator
    transactionGeneration = false

    # Max number of transactions generated per a new block received
    maxTransactionsPerBlock = 100
  }

  cache {
    # Number of recently used modifiers that will be kept in memory
    modifiersCacheSize = 1000

    # Number of recently used indexes that will be kept in memory
    indexesCacheSize = 10000
  }

  # Chain-specific settings. Change only if you are going to launch a new chain!
  chain {
    # Network address prefix, currently reserved values are 0x00 (money chain mainnet) and 0x20 (32 in decimal,
    # money chain testnet)
    addressPrefix = 16

    # Monetary config for chain
    monetary {
      # number of blocks reward won't change (525600 (2 years) for mainnet, 10080 (14 days) for testnet)
      fixedRatePeriod = 10080
      # number of coins issued every block during fixedRatePeriod (75 Ergo)
      fixedRate = 75000000000
      # number of blocks between reward reduction (64800 (90 days) for mainnet, 2160 (3 days) for testnet)
      epochLength = 2160
      # number of coins reward decrease every epochs (3 Ergo)
      oneEpochReduction = 3000000000
      # delay between the block mined and a time, when the reward can be spend. ~ 1 day.
      minerRewardDelay = 720
      # Base16 representation of state roothash after genesis
      afterGenesisStateDigestHex = "1df226fb838115c8290019239038cdb88ec37846948729abc132d6bef446913f01"
    }

    # Desired time interval between blocks
    blockInterval = 2m

    # Length of an epoch in difficulty recalculation. 1 means difficulty recalculation every block
    epochLength = 256

    # Number of last epochs that will  be used for difficulty recalculation
    useLastEpochs = 8

    # Proof-of-Work algorithm and its parameters. Possible options are "fake" and "autolykos".
    powScheme {
      powType = "autolykos"
      k = 32
      n = 26
    }

    voting {
      # Length of a voting epoch.
      votingLength = 1024

      # Voting epochs to vote for soft-fork
      softForkEpochs = 32

      # Voting epochs to activate a soft-fork after acceptance
      activationEpochs = 128
    }

    # Defines an id of the genesis block. Other genesis blocks will be considered invalid.
    # genesisId = "ab19bb59871e86507defb9a7769841b1130aad4d8c1ea8b0e01e0dee9e97a27e"
  }

  wallet {
    # Seed the wallet private keys are derived from
    seed = "C8FABEC17697FAF29E9887F716BB5004"

    # How many Schorr secret keys (w for the g^w public key) to generate
    dlogSecretsNumber = 4

    # Interval to re-scan uncertain boxes. When a block arrives, its transaction outputs are to be scanned, and if
    # certain bytes are found in the output script (e.g. public key bytes), the box is to be put to a queue of a boxes
    # which are potentially wallet's. But to be sure, script execution is needed, which could be costly to do in a bulk.
    # So we check from a queue only one box per "scanningInterval".
    scanningInterval = 1s
  }


  # To vote for parameter change, in the following section put target value for a parameter.
  # For that, find parameters table in the Yellow paper, find "id" of a parameter of interest, and put target value
  # for the parameter below. A node will automatically vote, if actual parameter value is different from the target one.

  voting {
    # Example: storage fee factor id = 1, target value = 1000000
    # 1 = 1000000
  }
}
scorex {
  network {
    bindAddress = "0.0.0.0:9008"
    maxInvObjects = 400
    nodeName = "ergo-testnet-1.8"
    knownPeers = ["78.46.93.239:9008", "209.97.136.204:9008", "209.97.138.187:9008", "209.97.134.210:9008", "88.198.13.202:9008"]
    syncInterval = 15s
    syncStatusRefresh = 30s
    syncIntervalStable = 20s
    syncTimeout = 5s
    syncStatusRefreshStable = 1m
    deliveryTimeout = 8s
    maxDeliveryChecks = 2
    appVersion = 0.2.1
    agentName = "ergoref"
    maxModifiersCacheSize = 512
    maxPacketSize = 2048576
  }
  restApi {
    bindAddress = "0.0.0.0:9052"
    apiKeyHash = "1111"
  }
}