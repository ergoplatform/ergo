openapi: "3.0.1"

info:
  version: "0.1"
  title: Ergo Node API
  description: API docs for Ergo Node. Models are shared between all Ergo products
  contact:
    name: Ergo Platform Team
    email: ergoplatform@protonmail.com
    url: https://ergoplatform.org
  license:
    name: CC0 1.0 Universal
    url: https://raw.githubusercontent.com/ergoplatform/ergo/master/LICENSE

components:
  schemas:
    # Objects
    ErgoTransactionInput:
      type: object
      required:
      - boxId
      - spendingProof
      properties:
        boxId:
          $ref: '#/components/schemas/TransactionBoxId'
        spendingProof:
          $ref: '#/components/schemas/SpendingProof'

    SpendingProof:
      description: Spending proof for transaction input
      type: object
      required:
      - proofBytes
      - extension
      properties:
        proofBytes:
          $ref: '#/components/schemas/SpendingProofBytes'
        extension:
          type: object
          description: Variables to be put into context
          additionalProperties:
            $ref: '#/components/schemas/SValue'
          example:
            '1': '0101'

    ErgoTransactionOutput:
      type: object
      required:
      - value
      - proposition
      - additionalRegisters
      - creationHeight
      properties:
        boxId:
          $ref: '#/components/schemas/TransactionBoxId'
        value:
          description: Amount of Ergo token
          type: integer
          format: int64
          minimum: 0
          example: 147
        proposition:
          $ref: '#/components/schemas/Proposition'
        creationHeight:
          description: Height the output was created at
          type: integer
          format: int32
          example: 9149
        assets:
          description: Assets list in the transaction
          type: array
          items:
            $ref: '#/components/schemas/Asset'
        additionalRegisters:
          $ref: '#/components/schemas/Registers'

    ErgoTransaction:
      type: object
      description: Transaction without any lockers and unlockers
      required:
      - inputs
      - outputs
      properties:
        id:
          $ref: '#/components/schemas/TransactionId'
        inputs:
          description: Many transaction inputs
          type: array
          items:
            $ref: '#/components/schemas/ErgoTransactionInput'
        outputs:
          description: Many transaction outputs
          type: array
          items:
            $ref: '#/components/schemas/ErgoTransactionOutput'
        size:
          description: Size in bytes
          type: integer
          format: int32

    ErgoAddress:
      description: Encoded Ergo Address
      type: string
      example: '3WyAaMQmWbb3Zx1iQwwcRrM9ioGtsHy6y7XaPVJWjacVHmf3UbLe'

    AddressHolder:
      description: Holds encoded ErgoAddress
      type: object
      required:
      - address
      properties:
        address:
          $ref: '#/components/schemas/ErgoAddress'

    RequestsHolder:
      description: Holds many transaction requests and transaction fee
      type: object
      required:
      - requests
      - fee
      properties:
        requests:
          description: Sequence of transaction requests
          type: array
          items:
            anyOf:
            - $ref: '#/components/schemas/PaymentRequest'
            - $ref: '#/components/schemas/AssetIssueRequest'
        fee:
          description: Transaction fee
          type: integer
          format: int64
          example: 100

    SourceHolder:
      type: object
      required:
      - source
      properties:
        source:
          description: Sigma source to be compiled
          type: string

    PaymentRequest:
      description: Request for generation of payment transaction to a given address
      type: object
      required:
      - address
      - value
      properties:
        address:
          $ref: '#/components/schemas/ErgoAddress'
        value:
          description: Payment amount
          type: integer
          format: int64
          example: 1
        assets:
          description: Assets list in the transaction
          type: array
          items:
            $ref: '#/components/schemas/Asset'
        registers:
          $ref: '#/components/schemas/Registers'
        fee:
          description: Optional, default transaction fee from settings will be used if not defined
          type: integer
          format: int64
          example: 100

    AssetIssueRequest:
      description: Request for generation of asset issue transaction
      type: object
      required:
      - amount
      - name
      - description
      - decimals
      properties:
        address:
          description: Optional, first address in the wallet will be used if not defined
          $ref: '#/components/schemas/ErgoAddress'
        amount:
          description: Supply amount
          type: integer
          format: int64
          example: 100
        name:
          description: Assets name
          type: string
          example: 'TST'
        description:
          description: Assets description
          type: string
          example: 'Test token'
        decimals:
          description: Number of decimal places
          type: integer
          format: int32
          example: 8
        fee:
          description: Optional, default transaction fee from settings will be used if not defined
          type: integer
          format: int64
          example: 100

    FullBlock:
      description: Block with header and transactions
      type: object
      required:
      - header
      - blockTransactions
      - adProofs
      - extension
      - size
      properties:
        header:
          $ref: '#/components/schemas/BlockHeader'
        blockTransactions:
          $ref: '#/components/schemas/BlockTransactions'
        adProofs:
          $ref: '#/components/schemas/BlockADProofs'
        extension:
          $ref: '#/components/schemas/Extension'
        size:
          description: Size in bytes
          type: integer
          format: int32

    PowSolutions:
      description: An object containing all components of pow solution
      type: object
      required:
      - pk
      - w
      - n
      - d
      properties:
        pk:
          type: string
          description: Base16-encoded public key
          example: '0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5'
        w:
          type: string
          example: '0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12'
        n:
          type: string
          example: '0000000000000000'
        d:
          type: integer
          example: 987654321

    BlockHeader:
      type: object
      required:
      - id
      - timestamp
      - version
      - interlinks
      - adProofsRoot
      - stateRoot
      - transactionsRoot
      - nBits
      - extensionHash
      - powSolutions
      - height
      - difficulty
      - parentId
      - votes
      - size
      properties:
        id:
          $ref: '#/components/schemas/ModifierId'
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        version:
          $ref: '#/components/schemas/Version'
        interlinks:
          description: A vector containing pointers to previous blocks, including the id of the previous block. See https://pdfs.semanticscholar.org/1969/453d7960eaca8cfbd642877925f5f5028ce5.pdf for more info
          type: array
          items:
            $ref: '#/components/schemas/Digest32'
        adProofsRoot:
          $ref: '#/components/schemas/Digest32'
        stateRoot:
          $ref: '#/components/schemas/ADDigest'
        transactionsRoot:
          $ref: '#/components/schemas/Digest32'
        nBits:
          type: integer
          format: int64
          minimum: 0
          example: 19857408
        extensionHash:
          $ref: '#/components/schemas/Digest32'
        powSolutions:
          $ref: '#/components/schemas/PowSolutions'
        height:
          type: integer
          format: int32
          minimum: 0
          example: 667
        difficulty:
          type: integer
          format: int32
          minimum: 0
          example: 62
        parentId:
          $ref: '#/components/schemas/ModifierId'
        votes:
          $ref: '#/components/schemas/Votes'
        size:
          description: Size in bytes
          type: integer
          format: int32

    BlockTransactions:
      type: object
      required:
      - headerId
      - transactions
      - size
      properties:
        headerId:
          $ref: '#/components/schemas/ModifierId'
        transactions:
          $ref: '#/components/schemas/Transactions'
        size:
          description: Size in bytes
          type: integer
          format: int32

    BlockADProofs:
      type: object
      required:
      - headerId
      - proofBytes
      - digest
      - size
      properties:
        headerId:
          $ref: '#/components/schemas/ModifierId'
        proofBytes:
          $ref: '#/components/schemas/SerializedAdProof'
        digest:
          $ref: '#/components/schemas/Digest32'
        size:
          description: Size in bytes
          type: integer
          format: int32

    Extension:
      type: object
      required:
      - headerId
      - digest
      - fields
      properties:
        headerId:
          $ref: '#/components/schemas/ModifierId'
        digest:
          $ref: '#/components/schemas/Digest32'
        fields:
          description: List of key-value records
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/KeyValueItem'

    KeyValueItem:
      type: array
      items:
        $ref: '#/components/schemas/HexString'

    CandidateBlock:
      type: object
      nullable: true
      description: Can be null if node is not mining or candidate block is not ready
      required:
      - extensionHash
      - parentId
      properties:
        version:
          type: integer
          format: int8
          example: 2
        extensionHash:
          $ref: '#/components/schemas/Digest32'
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        stateRoot:
          $ref: '#/components/schemas/ADDigest'
        nBits:
          type: integer
          format: int64
          minimum: 0
          example: 19857408
        adProofBytes:
          $ref: '#/components/schemas/SerializedAdProof'
        parentId:
          $ref: '#/components/schemas/ModifierId'
        transactionsNumber:
                  type: integer
                  format: int32
                  example: 2
        transactions:
          $ref: '#/components/schemas/Transactions'
        votes:
          $ref: '#/components/schemas/Votes'

    Peer:
      type: object
      required:
      - address
      properties:
        address:
          type: string
          example: '127.0.0.1:5673'
        name:
          type: string
          example: mynode
          nullable: true
        lastSeen:
          $ref: '#/components/schemas/Timestamp'
        connectionType:
          type: string
          nullable: true
          enum:
          - Incoming
          - Outgoing

    NodeInfo:
      type: object
      required:
      - name
      - appVersion
      - fullHeight
      - headersHeight
      - bestFullHeaderId
      - previousFullHeaderId
      - bestHeaderId
      - headersScore
      - fullBlocksScore
      - stateRoot
      - stateType
      - stateVersion
      - isMining
      - peersCount
      - unconfirmedCount
      - difficulty
      - currentTime
      - launchTime
      - genesisBlockId
      - parameters
      properties:
        name:
          type: string
          example: my-node-1
        appVersion:
          type: string
          example: 0.0.1
        fullHeight:
          type: integer
          format: int32
          description: Can be 'null' if state is empty (no full block is applied since node launch)
          minimum: 0
          example: 667
          nullable: true
        headersHeight:
          type: integer
          format: int32
          description: Can be 'null' if state is empty (no header applied since node launch)
          minimum: 0
          example: 667
          nullable: true
        bestFullHeaderId:
          type: string
          description: Can be 'null' if no full block is applied since node launch
          nullable: true
          allOf:
          - $ref: '#/components/schemas/ModifierId'
        previousFullHeaderId:
          type: string
          description: Can be 'null' if no full block is applied since node launch
          nullable: true
          allOf:
          - $ref: '#/components/schemas/ModifierId'
        bestHeaderId:
          type: string
          description: Can be 'null' if no header applied since node launch
          nullable: true
          allOf:
          - $ref: '#/components/schemas/ModifierId'
        stateRoot:
          type: string
          nullable: true
          description: Can be 'null' if state is empty (no full block is applied since node launch)
          example: 'dab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117'
        stateType:
          type: string
          enum:
          - digest
          - utxo
        stateVersion:
          description: Can be 'null' if no full block is applied since node launch
          type: string
          example: 'fab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117'
          nullable: true
        isMining:
          type: boolean
          example: true
        peersCount:
          type: integer
          description: Number of connected peers
          format: int32
          minimum: 0
          example: 327
        unconfirmedCount:
          description: Current unconfirmed transactions count
          type: integer
          format: int32
          minimum: 0
          maximum: 10000
          example: 327
        difficulty:
          type: integer
          format: int32
          minimum: 0
          nullable: true
          example: 667
          description: Difficulty on current bestFullHeaderId. Can be 'null' if no full block is applied since node launch
        currentTime:
          type: integer
          description: Current internal node time
          allOf:
          - $ref: '#/components/schemas/Timestamp'
        launchTime:
          type: integer
          description: Time when the node was started
          allOf:
          - $ref: '#/components/schemas/Timestamp'
        headersScore:
          type: integer
          description: Can be 'null' if no headers is applied since node launch
          nullable: true
        fullBlocksScore:
          type: integer
          description: Can be 'null' if no full block is applied since node launch
          nullable: true
        genesisBlockId:
          type: string
          description: Can be 'null' if genesis blocks is not produced yet
          nullable: true
          allOf:
          - $ref: '#/components/schemas/ModifierId'
        parameters:
          type: object
          description: current parameters
          $ref: '#/components/schemas/Parameters'

    Parameters:
          type: object
          required:
          - height
          - blockVersion
          - storageFeeFactor
          - minValuePerByte
          - maxBlockSize
          - maxBlockCost
          properties:
            height:
              type: integer
              format: int32
              description: Height when current parameters were considered(not actual height). Can be '0' if state is empty
              minimum: 0
              example: 667
              nullable: false
            storageFeeFactor:
              type: integer
              format: int32
              description: Storage fee coefficient (per byte per storage period ~4 years)
              minimum: 0
              example: 100000
              nullable: false
            minValuePerByte:
              type: integer
              format: int32
              description: Minimum value per byte of an output
              minimum: 0
              example: 360
              nullable: false
            maxBlockSize:
              type: integer
              format: int32
              description: Maximum block size (in bytes)
              minimum: 0
              example: 1048576
              nullable: false
            maxBlockCost:
              type: integer
              format: int32
              description: Maximum cumulative computational complexity of input scipts in block transactions
              minimum: 0
              example: 104876
              nullable: false
            blockVersion:
              $ref: '#/components/schemas/Version'
              nullable: false

    Version:
      description: Ergo blockchain protocol version
      type: integer
      format: int8
      example: 2

    TransactionBoxId:
      description: Base16-encoded transaction box id bytes. Should be 32 bytes long
      type: string
      format: base16
      example: '1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117'

    TransactionId:
      description: Base16-encoded transaction id bytes
      type: string
      format: base16
      example: '2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117'

    Proposition:
      description: Base16-encoded proposition bytes
      type: string
      format: base16
      example: '0101'

    Transactions:
      description: Ergo transaction objects
      type: array
      items:
        $ref: '#/components/schemas/ErgoTransaction'

    Asset:
      description: Token detail in the transaction
      type: object
      required:
      - tokenId
      - amount
      properties:
        tokenId:
          $ref: '#/components/schemas/Digest32'
        amount:
          description: Amount of the token
          type: integer
          format: int64
          example: 1000

    Registers:
      description: Ergo box registers
      type: object
      additionalProperties:
        $ref: '#/components/schemas/SValue'
      example:
        R4: '0101'

    SValue:
      description: Base-16 encoded serialized Sigma-state value
      type: string
      format: base16
      example: '0101'

    Votes:
      description: Base16-encoded votes for a soft-fork and parameters
      type: string
      format: base16
      example: '000000'

    ModifierId:
      description: Base16-encoded 32 byte modifier id
      type: string
      format: base16
      example: '3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117'

    Digest32:
      description: Base16-encoded 32 byte digest
      type: string
      format: base16
      example: '4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117'

    HexString:
      description: Base16-encoded bytes
      type: string
      format: base16
      example: '4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117'

    ADDigest:
      description: Base16-encoded 33 byte digest - digest with extra byte with tree height
      type: string
      format: base16
      example: '333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117'

    SerializedAdProof:
      description: Base16-encoded ad proofs
      type: string
      format: base16
      example: '3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117'

    SpendingProofBytes:
      description: Base16-encoded spending proofs
      type: string
      format: base16
      example: '4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117'

    BlockSignature:
      description: Base16-encoded block signature
      type: string
      format: base16
      example: '5ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117'

    Timestamp:
      description: Basic timestamp definition
      type: integer
      format: int32
      example: 1524143059077

    EmissionInfo:
      description: Emssion info for height
      type: object
      properties:
        minerReward:
          type: integer
          format: int64
        totalCoinsIssued:
          type: integer
          format: int64
        totalRemainCoins:
          type: integer
          format: int64

    BalancesSnapshot:
      description: Amount of Ergo tokens and assets
      type: object
      required:
      - height
      - balance
      properties:
        height:
          type: integer
          format: int32
        balance:
          type: integer
          format: int64
        assets:
          type: array
          items:
            $ref: '#/components/schemas/Asset'

    ApiError:
      type: object
      required:
      - error
      - reason
      - detail
      properties:
        error:
          type: integer
          description: Error code
          example: 500
        reason:
          type: string
          description: String error code
          example: 'Internal server error'
        detail:
          type: string
          nullable: true
          description: Detailed error description

paths:
  /blocks:
    get:
      summary: Get the Array of header ids
      operationId: getHeaderIds
      tags:
      - blocks
      parameters:
      - in: query
        name: limit
        required: false
        description: The number of items in list to return
        schema:
          type: integer
          format: int32
          minimum: 10
          maximum: 100
          default: 50
      - in: query
        name: offset
        required: false
        description: The number of items in list to skip
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        '200':
          description: Array of header ids
          content:
            application/json:
              schema:
                type: array
                description: Array of header ids
                items:
                  type: string
                  example: '8b7ae20a4acd23e3f1bf38671ce97103ad96d8f1c780b5e5e865e4873ae16337'
                example: ['8b7ae20a4acd23e3f1bf38671ce97103ad96d8f1c780b5e5e865e4873ae16337']
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

    post:
      summary: Send a mined block
      operationId: sendMinedBlock
      tags:
      - blocks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FullBlock'
      responses:
        '200':
          description: Block is valid
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /blocks/at/{blockHeight}:
    get:
      summary: Get the header ids at a given height
      operationId: getFullBlockAt
      tags:
      - blocks
      parameters:
      - in: path
        name: blockHeight
        required: true
        description: Height of a wanted block
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Array of header ids
          content:
            application/json:
              schema:
                type: array
                description: Array of header ids
                example: ['8b7ae20a4acd23e3f1bf38671ce97103ad96d8f1c780b5e5e865e4873ae16337']
                items:
                  type: string
                  example: '8b7ae20a4acd23e3f1bf38671ce97103ad96d8f1c780b5e5e865e4873ae16337'
        '404':
          description: Blocks at this height doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /blocks/{headerId}:
    get:
      summary: Get the full block info by a given signature
      operationId: getFullBlockById
      tags:
      - blocks
      parameters:
      # todo move out after full support aos3.0 was added to swagger-codegen
      - in: path
        name: headerId
        required: true
        description: ID of a wanted block
        schema:
          type: string
      responses:
        '200':
          description: Block object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullBlock'
        '404':
          description: Block with this id doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /blocks/{headerId}/header:
    get:
      summary: Get the block header info by a given signature
      operationId: getBlockHeaderById
      tags:
      - blocks
      parameters:
      # todo move out after full support aos3.0 was added to swagger-codegen
      - in: path
        name: headerId
        required: true
        description: ID of a wanted block header
        schema:
          type: string
      responses:
        '200':
          description: Block header object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockHeader'
        '404':
          description: Block with this id doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /blocks/{headerId}/transactions:
    get:
      summary: Get the block transactions info by a given signature
      operationId: getBlockTransactionsById
      tags:
      - blocks
      parameters:
      # todo move out after full support aos3.0 was added to swagger-codegen
      - in: path
        name: headerId
        required: true
        description: ID of a wanted block transactions
        schema:
          type: string
      responses:
        '200':
          description: Block transaction object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockTransactions'
        '404':
          description: Block with this id doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /blocks/candidateBlock:
    get:
      summary: Get the candidate block for mining
      operationId: getCandidateBlock
      tags:
      - blocks
      responses:
        '200':
          description: Candidate Full Block object
          content:
            application/json:
              schema:
                type: object
                properties:
                  isMining:
                    type: boolean
                  candidateBlock:
                    $ref: '#/components/schemas/CandidateBlock'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /blocks/lastHeaders/{count}:
    get:
      summary: Get the last headers objects
      operationId: getLastHeaders
      tags:
      - blocks
      parameters:
      # todo move out after full support aos3.0 was added to swagger-codegen
      - in: path
        name: count
        required: true
        description: count of a wanted block headers
        schema:
          type: number
      responses:
        '200':
          description: Array of block headers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BlockHeader'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /blocks/modifier/{modifierId}:
    get:
      summary: Get the persistent modifier by its id
      operationId: getModifierById
      tags:
      - blocks
      parameters:
      - in: path
        name: modifierId
        required: true
        description: ID of a wanted modifier
        schema:
          type: string
      responses:
        '200':
          description: Persistent modifier object
        '404':
          description: Modifier with this id doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /info:
    get:
      summary: Get the information about the Node
      operationId: getNodeInfo
      tags:
      - info
      responses:
        '200':
          description: Node info object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeInfo'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /transactions:
    post:
      summary: Send an anyone can spend transaction
      operationId: sendTransaction
      tags:
      - transactions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErgoTransaction'
      responses:
        '200':
          description: JSON with ID of the new transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionId'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /transactions/unconfirmed:
    parameters:
    # useless, varies dynamically
    - in: query
      name: limit
      required: false
      description: The number of items in list to return
      schema:
        type: integer
        format: int32
        minimum: 10
        maximum: 100
        default: 50
    - in: query
      name: offset
      required: false
      description: The number of items in list to skip
      schema:
        type: integer
        format: int32
        default: 0
    get:
      summary: Get current pool of the unconfirmed transactions pool
      operationId: getUnconfirmedTransactions
      tags:
      - transactions
      responses:
        '200':
          description: Array with anyone can spend transactions objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transactions'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /peers/all:
    get:
      summary: Get all known peers
      operationId: getAllPeers
      tags:
      - peers
      responses:
        '200':
          description: Array of peer objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Peer'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /peers/connected:
    get:
      summary: Get current connected peers
      operationId: getConnectedPeers
      tags:
      - peers
      responses:
        '200':
          description: Array of peer objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Peer'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /peers/connect:
    post:
      summary: Add address to peers list
      operationId: connectToPeer
      tags:
      - peers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
              example: '127.0.0.1:5673'
      responses:
        '200':
          description: Attempt to connect to the peer
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /peers/blacklisted:
    get:
      summary: Get blacklisted peers
      operationId: getBlacklistedPeers
      tags:
      - peers
      responses:
        '200':
          description: Array of the addresses
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: Blacklisted node address
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /utils/seed:
    get:
      summary: Get random seed with 32 bytes size
      operationId: getRandomSeed
      tags:
      - utils
      responses:
        '200':
          description: Base16-encoded 32 byte seed
          content:
            application/json:
              schema:
                type: string
                example: '7e1e79dd4936bdc7d09f4ba9212849136b589fba4bcf4263a0961a95b65d08cb16'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /utils/seed/{length}:
    get:
      summary: Generate random seed of specified length in bytes
      operationId: getRandomSeedWithLength
      tags:
      - utils
      parameters:
      - in: path
        name: length
        required: true
        description: seed length in bytes
        schema:
          type: string
      responses:
        '200':
          description: Base16-encoded N byte seed
          content:
            application/json:
              schema:
                type: string
                example: '83375fd213cfd7dfd984ce1901d62c302a1db53160b416674c8da1a393a6bbc316'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /utils/hash/blake2b:
    post:
      summary: Return Blake2b hash of specified message
      operationId: hashBlake2b
      tags:
      - utils
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
              example: '7yaASMijGEGTbttYHg1MrXnWB8EbzjJnFLSWvmNoHrXV'
      responses:
        '200':
          description: Base16-encoded 32 byte hash
          content:
            application/json:
              schema:
                type: string
                example: '7e1e79dd4936bdc7d09f4ba9212849136b589fba4bcf4263a0961a95b65d08cb16'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /wallet/balances:
    get:
      summary: Get total amount of confirmed Ergo tokens and assets
      operationId: walletBalances
      tags:
      - wallet
      responses:
        '200':
          description: Get total amount of confirmed Ergo tokens and assets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalancesSnapshot'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /wallet/balances/with_unconfirmed:
    get:
      summary: Get summary amount of confirmed plus unconfirmed Ergo tokens and assets
      operationId: walletBalancesUnconfirmed
      tags:
      - wallet
      responses:
        '200':
          description: Get summary amount of confirmed plus unconfirmed Ergo tokens and assets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalancesSnapshot'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /wallet/addresses:
    get:
      summary: Get wallet addresses
      operationId: walletAddresses
      tags:
      - wallet
      responses:
        '200':
          description: String with encoded wallet addresses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ErgoAddress'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /wallet/p2s_address:
    post:
      summary: Create P2SAddress from Sigma source
      operationId: walletP2SAddress
      tags:
      - wallet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SourceHolder'
      responses:
        '200':
          description: Ergo address derived from source
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressHolder'
        '400':
          description: Bad source
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /wallet/p2sh_address:
    post:
      summary: Create P2SHAddress from Sigma source
      operationId: walletP2SAddress
      tags:
      - wallet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SourceHolder'
      responses:
        '200':
          description: Ergo address derived from source
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressHolder'
        '400':
          description: Bad source
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /wallet/transaction/generate:
    post:
      summary: Generate arbitrary transaction
      operationId: walletTransactionGenerate
      tags:
      - wallet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestsHolder'
      responses:
        '200':
          description: Generated Ergo transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErgoTransaction'
        '400':
          description: Bad transaction request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /wallet/transaction/send:
    post:
      summary: Generate and send arbitrary transaction
      operationId: walletTransactionGenerateAndSend
      tags:
      - wallet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestsHolder'
      responses:
        '200':
          description: Identifier of an Ergo transaction generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionId'
        '400':
          description: Bad transaction request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /wallet/payment/generate:
    post:
      summary: Generate payment transaction
      operationId: walletPaymentTransactionGenerate
      tags:
      - wallet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PaymentRequest'
      responses:
        '200':
          description: Generated Ergo transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErgoTransaction'
        '400':
          description: Bad payment request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /wallet/payment/send:
    post:
      summary: Generate and send payment transaction
      operationId: walletPaymentTransactionGenerateAndSend
      tags:
      - wallet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PaymentRequest'
      responses:
        '200':
          description: Identifier of an Ergo transaction generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionId'
        '400':
          description: Bad payment request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /wallet/assets/generate:
    post:
      summary: Generate asset issue transaction
      operationId: walletAssetIssueTransactionGenerate
      tags:
      - wallet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AssetIssueRequest'
      responses:
        '200':
          description: Generated Ergo transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErgoTransaction'
        '400':
          description: Bad asset issue request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /wallet/assets/issue:
    post:
      summary: Generate and send asset issue transaction
      operationId: walletAssetIssueTransactionGenerateAndSend
      tags:
      - wallet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AssetIssueRequest'
      responses:
        '200':
          description: Identifier of an Ergo transaction generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionId'
        '400':
          description: Bad asset issue request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'